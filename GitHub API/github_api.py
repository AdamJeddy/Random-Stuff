# -*- coding: utf-8 -*-
"""GitHub API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TIikDPSjQgnFBPj3PMXVLlmZO8Rk20TR
"""

import requests
from prettytable import PrettyTable
import pandas as pd
import json
from pandas.io.json import json_normalize

def get_GitHub_info(github_username):
    #api url to grab public user data
    api_url = f"https://api.github.com/users/{github_username}"
    #send GET request and get the json data (or equivalent dict format)
    response = requests.get(api_url)
    data =  response.json()

    df_owner_info = pd.DataFrame(data, index=[0])
    df_owner_info = df_owner_info[["id", "login", "location", "public_repos", "public_gists", "followers", "following"]]

    #api url to grab public user repositories
    api_url = f"https://api.github.com/users/{github_username}/repos"
    #send GET request and get the json data (or equivalent dict format)
    response = requests.get(api_url)
    data =  response.json()
    
    df_repo = pd.DataFrame()
    forks_count = 0
    stargazers_count = 0
    watchers_count = 0

    if len(data) > 0:
        df_repo = pd.DataFrame(pd.json_normalize(data[0]), index=[0])
        for i in range(1, len(data)):
            df_temp = pd.DataFrame(pd.json_normalize(data[i]), index=[0])
            df_repo = pd.concat([df_repo, df_temp])

        df_repo = df_repo[["id", "name", "url", "forks_count", "stargazers_count", "watchers_count"]]
        forks_count = df_repo["forks_count"].sum()
        stargazers_count = df_repo["stargazers_count"].sum()
        watchers_count = df_repo["watchers_count"].sum()

    return df_owner_info, df_repo, forks_count, stargazers_count, watchers_count

# User to search for
github_username  = "DeadPackets"

# Using the Function
df_owner_info, df_repo, forks_count, stargazers_count, watchers_count = get_GitHub_info(github_username)

"""## This displays the repos of the user along with the information which I think might be useful for the scoring algorithm such as forks, stargazers and watchers count

"""

print("Total Forks:",forks_count)
print("Total Stargazers:", stargazers_count)
print("Total Watchers:", watchers_count)

df_repo

# Version 1
df_owner_info

# Version 2
df_owner_info.T

"""
table = PrettyTable()
table.field_names = ["Key", "Value"]

#api url to grab public user data
api_url = f"https://api.github.com/users/{github_username}"

#send get request
response = requests.get(api_url)

#get the data in json or equivalent dict format
data =  response.json()

for key, value in data.items():
    table.add_row([key, value])

print(table)
"""

"""
table = PrettyTable()
table.field_names = ["Repository Name", "Created Date"]

#api url to grab public user repositories
api_url = f"https://api.github.com/users/{github_username}/repos"

#send get request
response = requests.get(api_url)

#get the json data
data =  response.json()

#print(data)
#for repository in data:
#    table.add_row([repository["name"], repository["created_at"]])
#print(table)
"""

"""
df_repo = pd.DataFrame()
df_own_repo = pd.DataFrame()

if len(data) > 0:
    df_repo = pd.DataFrame(pd.json_normalize(data[0]), index=[0])
    for i in range(1, len(data)):
        df_temp = pd.DataFrame(pd.json_normalize(data[i]), index=[0])
        df_repo = pd.concat([df_repo, df_temp])

    df_own_repo = df_repo[["id", "name", "url", "forks_count", "stargazers_count", "watchers", "watchers_count"]]

df_own_repo
"""